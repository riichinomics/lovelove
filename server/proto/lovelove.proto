syntax = "proto3";
package lovelove;

enum Month {
	UnknownMonth = 0;
	January = 1;
	February = 2;
	March = 3;
	April = 4;
	May = 5;
	June = 6;
	July = 7;
	August = 8;
	September = 9;
	October = 10;
	November = 11;
	December = 12;
}

enum Hana {
	UnknownSeason = 0;
	Ayame = 1;
	Botan = 2;
	Fuji = 3;
	Hagi = 4;
	Kiku = 5;
	Kiri = 6;
	Matsu = 7;
	Momiji = 8;
	Sakura = 9;
	Susuki = 10;
	Ume = 11;
	Yanagi = 12;
}

enum Variation {
	UnknownVariation = 0;
	First = 1;
	Second = 2;
	Third = 3;
	Fourth = 4;
}

enum GenericResponseCode {
	Error = 0;
	Ok = 1;
}

enum ConnectToGameResponseCode {
	ConnectToGameError = 0;
	ConnectToGameOk = 1;
	ConnectToGameFull = 2;
	ConnectToGameWaiting = 3;
}

enum PlayerPosition {
	UnknownPosition = 0;
	Red = 1;
	White = 2;
}

enum CardZone {
	UnknownZone = 0;
	Deck = 1;
	Drawn = 2;
	Table = 3;
	Hand = 4;
	Collection = 5;
}

enum YakuId {
	UnknownYaku = 0;

	Gokou = 1;
	Shikou = 2;
	Ameshikou = 3;
	Sankou = 4;

	Inoshikachou = 5;
	Tane = 6;

	AkatanAotanNoChoufuku = 7;
	Akatan = 8;
	Aotan = 9;
	Tanzaku = 10;

	Hanamizake = 11;
	Tsukimizake = 12;
	Tsukifuda = 13;
	Kasu = 14;
}

enum MessageType {
	Transact = 0;
	Broadcast = 1;
}

enum TeyakuId {
	UnknownTeyaku = 0;
	Teshi = 1;
	Kuttsuki = 2;
}

service LoveLove {
	rpc Authenticate (AuthenticateRequest) returns (AuthenticateResponse) {}

	rpc ConnectToGame (ConnectToGameRequest) returns (ConnectToGameResponse) {}

	rpc ResolveTeyaku (ResolveTeyakuRequest) returns (ResolveTeyakuResponse) {}

	rpc PlayHandCard (PlayHandCardRequest) returns (PlayHandCardResponse) {}

	rpc PlayDrawnCard (PlayDrawnCardRequest) returns (PlayDrawnCardResponse) {}

	rpc ResolveShoubuOpportunity (ResolveShoubuOpportunityRequest) returns (ResolveShoubuOpportunityResponse) {}
}

message Wrapper {
	MessageType type = 1;
	int32 sequence = 2;
	string contentType = 3;
	bytes data = 4;
}

message Card {
	int32 id = 1;
	Hana hana = 2;
	Variation variation = 3;
}

message PlayOptions {
	repeated int32 options = 1;
}

message ZonePlayOptions {
	repeated CardZone acceptedOriginZones = 1;
	PlayOptions noTargetPlayOptions = 2;
	map<int32, PlayOptions> playOptions = 3;
}

message YakuData {
	YakuId id = 1;
	int32 value = 2;
	repeated int32 cards = 3;
}

message CardMaybe {
	Card card = 1;
}

message ShoubuOpportunity {
	int32 value = 1;
}

message HandInformation {
	int32 numberOfCards = 1;
	repeated Card cards = 2;
}

message PlayerState {
	int32 score = 1;
	bool koikoi = 2;
	bool conceded = 3;
	HandInformation hand = 4;
	repeated Card collection = 5;
	repeated YakuData yakuInformation = 6;
	bool rematchAccepted = 7;
}

message GameEnd {
	PlayerPosition gameWinner = 5;
}

message CompleteGameState {
	Month month = 1;
	Hana monthHana = 2;
	PlayerPosition oya = 3;
	PlayerPosition active = 4;

	int32 deck = 5;
	Card deckFlipCard = 6;
	repeated CardMaybe table = 7;

	PlayerState redPlayer = 8;
	PlayerState whitePlayer = 9;

	ZonePlayOptions tablePlayOptions = 10;
	ShoubuOpportunity shoubuOpportunity = 11;
	TeyakuId teyaku = 12;

	GameEnd gameEnd = 13;
}

// Requests
message AuthenticateRequest {
	string userId = 1;
}

message AuthenticateResponse {
}


message ConnectToGameRequest {
	string roomId = 1;
}

message ConnectToGameResponse {
	ConnectToGameResponseCode status = 1;
}

message GameConnectionData {
	PlayerPosition position = 1;
	CompleteGameState gameState = 2;
	bool opponentDisconnected = 3;
}

message ResolveTeyakuRequest {

}

message ResolveTeyakuResponse {
	GenericResponseCode status = 1;
}


message CardId {
	int32 cardId = 1;
}

message PlayHandCardRequest {
	CardId handCard = 1;
	CardId tableCard = 2;
}

message PlayHandCardResponse {
	GenericResponseCode status = 1;
}

message PlayDrawnCardRequest {
	CardId tableCard = 2;
}

message PlayDrawnCardResponse {
	GenericResponseCode status = 1;
}

message ResolveShoubuOpportunityRequest {
	bool shoubu = 1;
}

message ResolveShoubuOpportunityResponse {
	GenericResponseCode status = 1;
}

// Updates
message CardSlot {
	CardZone zone = 1;
	int32 index = 2;
	PlayerPosition player = 3;
}

message CardMoveUpdate {
	Card movedCard = 1;
	CardSlot originSlot = 2;
	CardSlot destinationSlot = 3;
}

message YakuUpdatePart {
	YakuId yakuId = 1;
	int32 value = 2;
	repeated int32 cardIds = 3;
}

message YakuUpdate {
	repeated YakuId deletedYaku = 1;
	repeated YakuUpdatePart newOrUpdatedYaku = 2;
}

message GameStateUpdatePart {
	repeated CardMoveUpdate cardMoveUpdates = 1;
	ActivePlayerUpdate activePlayerUpdate = 2;
	PlayOptionsUpdate playOptionsUpdate = 3;
	YakuUpdate yakuUpdate = 4;
	YakuUpdate opponentYakuUpdate = 5;
	ShoubuOpportunityUpdate shoubuOpportunityUpdate = 6;
	RoundEndResult roundEndResult = 7;
	KoikoiUpdate koikoiUpdate = 8;
	ConnectionStatusUpdate connectionStatusUpdate = 9;
	GameConnectionData gameConnectionData = 10;
	RematchUpdate rematchUpdate = 11;
}

message ActivePlayerUpdate {
	PlayerPosition position = 1;
}

message PlayOption {
	CardId targetCardId = 1;
	CardId originCardId = 2;
}

message PlayOptionsZoneUpdate {
	repeated CardZone zones = 1;
}

message PlayOptionsUpdate {
	PlayOptionsZoneUpdate updatedAcceptedOriginZones = 1;
	repeated PlayOption defunctOptions = 2;
	repeated PlayOption newOptions = 3;
}

message GameStateUpdate {
	repeated GameStateUpdatePart updates = 1;
}

message ShoubuOpportunityUpdate {
	bool available = 1;
	int32 value = 2;
}

message KoikoiUpdate {
	bool self = 1;
	bool opponent = 2;
}

message ConnectionStatusUpdate {
	PlayerPosition player = 1;
	bool connected = 2;
}

message RematchUpdate {
	PlayerPosition player = 1;
}

message RoundEndResultTeyakuInformation {
	TeyakuId teyakuId = 1;
	repeated Card cards = 2;
}

message RoundEndResult {
	PlayerPosition winner = 1;
	int32 winnings = 2;
	CompleteGameState nextRound = 3;
	repeated RoundEndResultTeyakuInformation teyakuInformation = 4;
}
